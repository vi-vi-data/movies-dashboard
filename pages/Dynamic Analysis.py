import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import time


st.set_page_config(page_title="Exploratory Analysis", layout="wide")

st.title("Dynamic Analysis")
st.markdown('–ê–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ –∫—ñ–Ω–æ–≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—ñ –∫—Ä–∞—ó–Ω–∏ —Ç–∞ –∂–∞–Ω—Ä–∏ –ø–µ—Ä–µ–≤–∞–∂–∞–ª–∏ —É —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —á–∞—Å—É')

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
@st.cache_data
def load_data():
    return pd.read_csv("movie_metadata.csv")

df = load_data()
with st.expander("–§—ñ–ª—å—Ç—Ä–∏:"):
    # –ü—Ä–æ–º—ñ–∂–æ–∫ —Ä–æ–∫—ñ–≤
    min_year = int(df['title_year'].min())
    max_year = int(df['title_year'].max())
    selected_year_range = st.slider(
        "–í–∏–±–µ—Ä–∏ –ø—Ä–æ–º—ñ–∂–æ–∫ —Ä–æ–∫—ñ–≤",
        min_value=min_year,
        max_value=max_year,
        value=(min_year, max_year),
        step=1
    )

    country_options = ["All"] + sorted(df['country'].dropna().unique().tolist())
    selected_countries = st.multiselect(
        "–í–∏–±–µ—Ä–∏ –∫—Ä–∞—ó–Ω–∏",
        options=country_options,
        default=["All"]
    )

    # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–£—Å—ñ", –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    if "All" in selected_countries:
        selected_countries = df['country'].dropna().unique().tolist()

    # üîò –ß–µ–∫–±–æ–∫—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–±—Ä–æ–±–∫–∏
    run_analysis = st.checkbox("‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑")

# --- –û–±—Ä–æ–±–∫–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —á–µ–∫–±–æ–∫—Å –∞–∫—Ç–∏–≤–Ω–∏–π ---
if run_analysis:
    filtered_df = df[
        df['title_year'].between(selected_year_range[0], selected_year_range[1]) &
        df['country'].isin(selected_countries)
    ]

    # --- –ü—Ä–æ–≥—Ä–µ—Å–±–∞—Ä ---
    progress_container = st.container()
    with progress_container:
        st.write('–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è')
        progress_text = st.empty()
        progress_bar = st.progress(0)

    for i in range(3):
        time.sleep(0.05)
        with progress_container:
            progress_text.write(f'–ö—Ä–æ–∫ {i+1}/3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            progress_bar.progress((i+1) / 3)

    # --- –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è —á–µ–∫–±–æ–∫—Å—É ---
    st.subheader("–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞—Ç–∞—Å–µ—Ç")

    col1, col2, col3 = st.columns(3)
    col1.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å–º—ñ–≤", filtered_df.shape[0])
    col2.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫", filtered_df.shape[1])
    col3.metric("–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∂–∞–Ω—Ä—ñ–≤", filtered_df['genres'].nunique())

    with st.expander("–ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤ –¥–∞—Ç–∞—Å–µ—Ç—É"):
        st.dataframe(filtered_df.head(5))

        # --- –î–∞–Ω—ñ ---
    top_countries = filtered_df['country'].value_counts().nlargest(10)

    genre_series = filtered_df['genres'].dropna().str.split('|').explode()
    top_genres = genre_series.value_counts().nlargest(10)

    yearly_counts = filtered_df['title_year'].value_counts().sort_index()

    genre_ratings = (
        filtered_df.dropna(subset=['genres', 'imdb_score'])
        .assign(genres=filtered_df['genres'].str.split('|'))
        .explode('genres')
        .groupby('genres')['imdb_score'].mean()
        .sort_values(ascending=False)
        .head(10)
    )

    # --- Subplot 1: üìÖ –†–æ–∫–∏ + üè≥Ô∏è –ö—Ä–∞—ó–Ω–∏ ---
    st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏–ø—É—Å–∫—É —Ñ—ñ–ª—å–º—ñ–≤ —ñ –∫—Ä–∞—ó–Ω–∏-–ª—ñ–¥–µ—Ä–∏")

    fig1, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

    # –ì—Ä–∞—Ñ—ñ–∫ 1 ‚Äî üìÖ –†–æ–∫–∏
    sns.lineplot(x=yearly_counts.index, y=yearly_counts.values, marker='o', ax=ax2)
    ax2.set_title("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ —Ä–æ–∫–∞–º–∏")
    ax2.set_xlabel("–†—ñ–∫")
    ax2.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å–º—ñ–≤")

    # –ì—Ä–∞—Ñ—ñ–∫ 2 ‚Äî üè≥Ô∏è –ö—Ä–∞—ó–Ω–∏
    sns.barplot(x=top_countries.values, y=top_countries.index, ax=ax1, palette="Set2")
    ax1.set_title(" –¢–æ–ø-10 –∫—Ä–∞—ó–Ω –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ñ—ñ–ª—å–º—ñ–≤")
    ax1.set_xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å–º—ñ–≤")
    ax1.set_ylabel("")

    st.pyplot(fig1)

    # --- Subplot 2: ‚≠ê –†–µ–π—Ç–∏–Ω–≥ + üé¨ –ñ–∞–Ω—Ä–∏ ---
    st.subheader("–ñ–∞–Ω—Ä–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑: –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —ñ –æ—Ü—ñ–Ω–∫–∏")

    fig2, (ax3, ax4) = plt.subplots(1, 2, figsize=(16, 6))

    # –ì—Ä–∞—Ñ—ñ–∫ 3 ‚Äî ‚≠ê IMDb —Ä–µ–π—Ç–∏–Ω–≥
    sns.barplot(x=genre_ratings.values, y=genre_ratings.index, ax=ax3, palette="coolwarm")
    ax3.set_title("–°–µ—Ä–µ–¥–Ω—ñ–π IMDb —Ä–µ–π—Ç–∏–Ω–≥ (–¢–æ–ø-10 –∂–∞–Ω—Ä—ñ–≤)")
    ax3.set_xlabel("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥")
    ax3.set_ylabel("")

    # –ì—Ä–∞—Ñ—ñ–∫ 4 ‚Äî üé¨ –ñ–∞–Ω—Ä–∏
    sns.barplot(x=top_genres.values, y=top_genres.index, ax=ax4, palette="muted")
    ax4.set_title("–¢–æ–ø-10 –∂–∞–Ω—Ä—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ñ—ñ–ª—å–º—ñ–≤")
    ax4.set_xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å–º—ñ–≤")
    ax4.set_ylabel("")

    st.pyplot(fig2)

    
